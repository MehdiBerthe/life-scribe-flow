-- 01_memory_system.sql

-- 1) enable pgvector
create extension if not exists vector;

-- 2) conversations_memory: archive of user/agent/tool turns (renamed to avoid conflict)
create table if not exists conversations_memory (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  session_id uuid default gen_random_uuid(),
  role text check (role in ('user','assistant','system','tool')) not null,
  text text,
  metadata jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

-- 3) rag_docs: single vector index over meaningful content
create table if not exists rag_docs (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  kind text not null,             -- 'journal','reading_note','reflection','conversation_digest','goal_digest','finance_digest','contact_note'
  ref_id text,                    -- source row id
  title text,
  content text not null,
  metadata jsonb default '{}'::jsonb,
  embedding vector(1536),         -- adjust later if we change model
  created_at timestamptz default now()
);

-- Create indexes for rag_docs if they don't exist
do $$
begin
  if not exists (select 1 from pg_indexes where indexname = 'rag_docs_embedding_ivfflat_idx') then
    create index rag_docs_embedding_ivfflat_idx on rag_docs using ivfflat (embedding vector_cosine_ops) with (lists = 100);
  end if;
  
  if not exists (select 1 from pg_indexes where indexname = 'rag_docs_user_kind_time_idx') then
    create index rag_docs_user_kind_time_idx on rag_docs(user_id, kind, created_at desc);
  end if;
end $$;

-- 4) memories: durable key/value facts (structured memory)
create table if not exists memories (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  key text not null,
  value text not null,
  confidence real default 0.8,
  last_seen_at timestamptz default now(),
  unique(user_id, key)
);

-- 5) RLS: only owner can read/write
alter table conversations_memory enable row level security;
alter table rag_docs enable row level security;
alter table memories enable row level security;

-- Create policies if they don't exist
do $$
begin
  if not exists (select 1 from pg_policies where policyname = 'p_conversations_memory_rw' and tablename = 'conversations_memory') then
    create policy p_conversations_memory_rw on conversations_memory
      using (auth.uid() = user_id) with check (auth.uid() = user_id);
  end if;
  
  if not exists (select 1 from pg_policies where policyname = 'p_rag_docs_rw' and tablename = 'rag_docs') then
    create policy p_rag_docs_rw on rag_docs
      using (auth.uid() = user_id) with check (auth.uid() = user_id);
  end if;
  
  if not exists (select 1 from pg_policies where policyname = 'p_memories_rw' and tablename = 'memories') then
    create policy p_memories_rw on memories
      using (auth.uid() = user_id) with check (auth.uid() = user_id);
  end if;
end $$;